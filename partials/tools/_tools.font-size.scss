// @file
// partials/tools/_tools.font-size.scss


// Sets responsive font sizes and line heights for the provided breakpoint if it
// is found in the provided lists.
// If the font size is in pixels, it will be converted to rem unless the rem
// parameter is set to false.
@mixin shila-responsive-font-size($breakpoint, $font-sizes, $line-heights: (), $rem: true) {
  @if map-has-key($font-sizes, $breakpoint) {
    $font-size: map-get($font-sizes, $breakpoint);
    @if type-of($font-size) != 'number' {
      $type: type-of($font-size);
      @error "Font size value '#{$font-size}' shoud be a number but it is a #{$type}";
    }
    @if $rem == true and unit($font-size) == 'px' {
      $font-size: shila-px-to-rem($font-size, $breakpoint);
    }
    font-size: $font-size;
  }
  @if map-has-key($line-heights, $breakpoint) {
    line-height: map-get($line-heights, $breakpoint);
  }
}

// Sets responsive font sizes and line heights for all breakpoints found in the
// provided lists.
// If the font sizes are in pixels, they will be converted to rem unless the rem
// parameter is set to false.
@mixin shila-responsive-font-sizes($font-sizes, $line-heights: (), $rem: true) {
  @each $breakpoint in join('default', map-keys($shila-breakpoints)) {
    @if map-has-key($font-sizes, $breakpoint) or map-has-key($line-heights, $breakpoint) {
      @if $breakpoint == 'default' {
        @include shila-responsive-font-size($breakpoint, $font-sizes, $line-heights, $rem);
      }
      @else {
        @include breakpoint(shila-breakpoint($breakpoint)) {
          @include shila-responsive-font-size($breakpoint, $font-sizes, $line-heights, $rem);
        }
      }
    }
  }
}
