// @file
// sass/partials/tools/_tools.layout.scss


// tools.layout
//
// Style guide: tools.layout


// shila-side-margins
//
// <code>@mixin shila-side-margins($margin: $shila-base-spacing)</code>
//
// Sets the left and right margins.
//
// $margin - (Optional.) Margin to set.
//
// Style guide: tools.layout.shila-side-margins
@mixin shila-side-margins($margin: $shila-base-spacing) {
  margin-left: $margin;
  margin-right: $margin;
}


// shila-responsive-side-margins
//
// <code>@mixin shila-responsive-side-margins</code>
//
// Sets side margins for different breakpoints using the provided or default
// values.
//
// $margins - (Optional.) Sass map with margins keyed by breakpoints.
//
// Style guide: tools.layout.shila-responsive-side-margins
@mixin shila-responsive-side-margins($margins: $shila-side-spacings) {
  @each $breakpoint in join('default', map-keys($shila-breakpoints)) {
    @if map-has-key($margins, $breakpoint) {
      @if $breakpoint == 'default' {
        @include shila-side-margins(map-get($margins, $breakpoint));
      }
      @else {
        @include breakpoint(shila-breakpoint($breakpoint)) {
          @include shila-side-margins(map-get($margins, $breakpoint));
        }
      }
    }
  }
}


// shila-outer-container
//
// <code>@mixin shila-outer-container($max-width: $shila-max-page-width)</code>
//
// Sets a maximum width with <code>auto</code> side margins.
//
// $max-width - (Optional.) Maximum width.
//
// Style guide: tools.layout.shila-outer-container
@mixin shila-outer-container($max-width: $shila-max-page-width) {
  max-width: $max-width;
  @include shila-side-margins(auto);
}


// shila-flexbox-multicol-layout
//
// <code>@mixin shila-flexbox-multicol-layout($columns, $column-gap: null, $row-gap: null)</code>
//
// Defines a flexbox based multi-column layout. Calculations are based on 99.99%
// width to avoid undesired rounding in Microsoft IE / Edge browsers.
//
// $columns    - Number of columns.
// $column-gap - (Optional.) Column gap.
// $row-gap    - (Optional.) Row gap.
//
// Style guide: tools.layout.shila-flexbox-multicol-layout
@mixin shila-flexbox-multicol-layout($columns, $column-gap: null, $row-gap: null) {
  display: flex;
  flex-wrap: wrap;
  & > * {
    @if not $column-gap {
      width: 99.99% / $columns;
    }
    @else {
      width: calc((99.99% - #{($columns - 1) * $column-gap}) / #{$columns});
    }
    @if $column-gap {
      &:nth-child(n) {
        margin-left: $column-gap;
      }
      &:nth-child(#{$columns}n+1) {
        margin-left: 0;
      }
    }
    @if $row-gap {
      margin-bottom: $row-gap;
    }
  }
}


// shila-css-grid-multicol-layout
//
// <code>@mixin shila-css-grid-multicol-layout($columns, $column-gap: null, $row-gap: null)</code>
//
// Defines a CSS grid based multi-column layout. Percentage based widths are
// used to ensure equal width columns.
//
// $columns    - Number of columns.
// $column-gap - (Optional.) Column gap.
// $row-gap    - (Optional.) Row gap.
//
// Style guide: tools.layout.shila-css-grid-multicol-layout
@mixin shila-css-grid-multicol-layout($columns, $column-gap: null, $row-gap: null) {
  display: grid;
  @if $columns == 1 or not $column-gap {
    grid-template-columns: repeat(#{$columns}, 100% / $columns);
  }
  @else {
    grid-template-columns: repeat(#{$columns}, calc((100% - #{($columns - 1) * $column-gap}) / #{$columns}));
  }
  @if $column-gap {
    grid-column-gap: $column-gap;
  }
  @if $row-gap {
    grid-row-gap: $row-gap;
  }
}


// shila-multicol-breakpoint-layout
//
// <pre><code>@mixin shila-multicol-breakpoint-layout(
//   $columns: ('s': 2, 'm': 3, 'l': 4),
//   $column-gaps: ('s': $shila-base-spacing, 'm': $shila-base-spacing, 'l': $shila-base-spacing),
//   $row-gaps: (),
//   $type: 'flexbox'
// )</code></pre>
//
// Defines CSS multi-column layouts for different breakpoints.
//
// $columns     - Sass map with columns keyed by breakpoints.
// $column-gaps - Sass map with column gaps keyed by breakpoints.
// $row-gaps    - Sass map with row gaps keyed by breakpoints.
// $type        - 'flexbox' (default value) or 'css-grid'.
//
// Style guide: tools.layout.shila-multicol-layout
@mixin shila-multicol-breakpoint-layout(
  $columns: ('s': 2, 'm': 3, 'l': 4),
  $column-gaps: ('s': $shila-base-spacing, 'm': $shila-base-spacing, 'l': $shila-base-spacing),
  $row-gaps: (),
  $type: 'flexbox'
) {
  @each $breakpoint in join('default', map-keys($shila-breakpoints)) {
    @if map-has-key($columns, $breakpoint) {
      $cols: map-get($columns, $breakpoint);
      $column-gap: map-get($column-gaps, $breakpoint);
      $row-gap: map-get($row-gaps, $breakpoint);
      @if $breakpoint == 'default' {
        @if $type == 'css-grid' {
          @include shila-css-grid-multicol-layout($cols, $column-gap, $row-gap);
        }
        @else {
          @include shila-flexbox-multicol-layout($cols, $column-gap, $row-gap);
        }
      }
      @else {
        @include breakpoint(shila-breakpoint($breakpoint)) {
          @if $type == 'css-grid' {
            @include shila-css-grid-multicol-layout($cols, $column-gap, $row-gap);
          }
          @else {
            @include shila-flexbox-multicol-layout($cols, $column-gap, $row-gap);
          }
        }
      }
    }
  }
}
